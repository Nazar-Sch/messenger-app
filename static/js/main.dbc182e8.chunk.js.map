{"version":3,"sources":["assets/images/searchIcon.svg","assets/images/webp/me.webp","assets/images/checked.svg","assets/images/sendIcon.svg","assets/images/webp/alice.webp","assets/images/webp/josefiena.webp","assets/images/webp/velazzquez.webp","assets/images/webp/bareira.webp","components/Chats/chatsView.js","components/Search/searchView.js","components/usersAvatar/usersAvatar.js","components/usersAvatar/index.js","components/Search/index.js","components/Search/searchController.js","redux/selectors/rootSelectors.js","api/api.js","components/Chats/index.js","components/Chats/chatsController.js","redux/actions/rootActions.js","redux/constants/types.js","components/Messages/messagesView.js","components/Messages/messagesFormView.js","components/Messages/messagesFormController.js","components/Messages/index.js","components/Messages/messagesController.js","components/App/App.js","redux/reducers/rootReducer.js","redux/store.js","serviceWorker.js","index.js"],"names":["module","exports","ChatsWrapper","styled","div","ChatsMain","ChatsHeading","h1","ChatContainer","TextContainer","TextContainerTop","ContactsName","MessageContainer","DateContainer","span","NotFound","SearchWrapper","InputField","SearchIcon","img","SearchInput","input","UsersAvatar","src","checked","send","AvatarWrapper","props","AvatarItem","CheckedProfile","alt","CheckedIcon","Search","value","handleValue","UsersAvatarImg","searchIconLink","href","placeholder","onChange","contactsInfo","state","rootReducer","contacts","id","selectedId","instance","axios","create","baseURL","api","getRandomJoke","get","Chats","useSelector","dispatch","useDispatch","useState","searchValue","setSearchValue","filterByName","serachedValue","toLowerCase","filter","item","name","includes","ContactsWrapper","length","map","onClick","type","payload","avatar","checkedProfile","moment","messagesList","date","format","message","e","target","MessagesWrapper","MessagesHeader","MessagesMain","Message","MessageData","TextContainerMessage","InputWrapper","InputTypeForm","form","InputType","SendButton","SendIcon","MessagesForm","typedText","setTypedText","sendMessage","text","Date","toISOString","sent","then","res","data","catch","err","console","log","getJoke","handleKeyPress","key","preventDefault","onKeyPress","Messages","active","find","user","activeDialog","App","AppWrapper","initialState","AliceAvatar","JoseffinaAvatar","VelazzquezAvatar","BarrieraAvatar","action","dialog","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.dbc182e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/searchIcon.2150318f.svg\";","module.exports = __webpack_public_path__ + \"static/media/me.20bdba7b.webp\";","module.exports = __webpack_public_path__ + \"static/media/checked.5098214d.svg\";","module.exports = __webpack_public_path__ + \"static/media/sendIcon.f1f16c14.svg\";","module.exports = __webpack_public_path__ + \"static/media/alice.0016bc58.webp\";","module.exports = __webpack_public_path__ + \"static/media/josefiena.3df665c5.webp\";","module.exports = __webpack_public_path__ + \"static/media/velazzquez.37ff2bac.webp\";","module.exports = __webpack_public_path__ + \"static/media/bareira.30f622fa.webp\";","import styled from 'styled-components'\r\n\r\nexport const ChatsWrapper = styled.div`\r\n    max-width: 35vw;\r\n    width: 100%;\r\n    min-width: 280px;\r\n`;\r\nexport const ChatsMain = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow: auto;\r\n    height: 76.5vh;\r\n    overflow-y : auto;\r\n    &::-webkit-scrollbar {\r\n        width: 3px;\r\n    }\r\n    &::-webkit-scrollbar-track {\r\n        background: #F5F5F5;\r\n    }\r\n    &::-webkit-scrollbar-thumb {\r\n        background: #E5E5E5;\r\n    }\r\n    &::-webkit-scrollbar-thumb:hover {\r\n        background: #555;\r\n    }\r\n`;\r\nexport const ChatsHeading = styled.h1`\r\n    font-size: 32px;\r\n    color: #86C4D3;\r\n    padding-top: 45px;\r\n    padding-bottom: 45px;\r\n    padding-left: 10px;\r\n`;\r\nexport const ChatContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n    padding-bottom: 20px;\r\n    padding-top: 20px;\r\n    border-bottom: 2px solid #E5E5E5;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background-color: #F5F5F5;\r\n    }\r\n`;\r\nexport const TextContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100vw;\r\n`;\r\nexport const TextContainerTop = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding-bottom: 5px;\r\n`;\r\nexport const ContactsName = styled.div`\r\n    font-size: 20px;\r\n    color: #3D3D3D;\r\n    color: black;\r\n`;\r\nexport const MessageContainer = styled.div`\r\n    font-size: 16px;\r\n    color: #5C5C5C;\r\n    max-width: 315px;\r\n    line-height: 1.2;\r\n`;\r\nexport const DateContainer = styled.span`\r\n    font-size: 15px;\r\n    opacity: 0.9;\r\n    color: #3C4154;\r\n    place-content: flex-end;\r\n    color: black;\r\n    padding-right: 10px;\r\n`;\r\nexport const NotFound = styled.div`\r\n    text-align: center;\r\n    width: 100%;\r\n    font-size: 20px;\r\n`;\r\n","import styled from 'styled-components'\r\n\r\nexport const SearchWrapper = styled.div`\r\n    padding: 15px;\r\n    padding-right: 20px;\r\n    padding-left: 20px;\r\n    padding-top: 25px;\r\n    padding-bottom: 25px;\r\n    background-color: #F5F5F5;\r\n    border-bottom: 2px solid #E5E5E5;\r\n`;\r\n\r\nexport const InputField = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    border: 1px solid #E5E5E5;\r\n    border-radius: 20px;\r\n    background-color: #fff;\r\n    margin-top: 20px;\r\n`;\r\nexport const SearchIcon = styled.img`\r\n    width: 16px;\r\n    height: 16px;\r\n    margin-right: 5px;\r\n    margin: 7px;\r\n`;\r\n\r\nexport const SearchInput = styled.input`\r\n    background-color: transparent;\r\n    border: 0;\r\n    font-size: 16px;\r\n    width: 90%;\r\n    padding-top: 7px;\r\n    padding-bottom: 7px;\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nimport CheckedIcon from '../../assets/images/checked.svg';\r\n\r\nconst UsersAvatar = ({ src, checked, send }) => {\r\n    const AvatarWrapper = styled.div`\r\n        min-width: 70px;\r\n        max-width: 71px;\r\n        height: 70px;\r\n        margin: 8px;\r\n        display: ${props => props.send ? `none` : `block`};\r\n    `;\r\n    const AvatarItem = styled.img`\r\n        border-radius: 50%;\r\n        width: 100%;\r\n        height: auto;\r\n    `;\r\n    const CheckedProfile = styled.img`\r\n        display: ${props => props.checked ? `inline` : `none`};\r\n        transform: translate(50px,-20px);\r\n        width: 16px;\r\n        height: auto;\r\n    `;\r\n    return (\r\n        <AvatarWrapper send={send}>\r\n           <AvatarItem src={src} alt=\"Users avatar\" /> \r\n           <CheckedProfile checked={checked} src={CheckedIcon} />\r\n        </AvatarWrapper>\r\n    );\r\n};\r\n\r\nexport default UsersAvatar;\r\n","import UsersAvatar from './usersAvatar'\r\n\r\nexport default UsersAvatar","import Search from './searchController'\r\n\r\nexport default Search","import React from 'react';\r\n\r\nimport {\r\n    SearchWrapper,\r\n    SearchInput,\r\n    InputField,\r\n    SearchIcon,\r\n} from './searchView'\r\nimport searchIconLink from '../../assets/images/searchIcon.svg';\r\nimport UsersAvatarImg from '../../assets/images/webp/me.webp';\r\nimport UsersAvatar from \"../usersAvatar\";\r\n\r\nconst Search = ({ value, handleValue }) => {\r\n    return (\r\n        <SearchWrapper>\r\n            <UsersAvatar src={UsersAvatarImg} checked={true} />\r\n            <InputField>\r\n                <SearchIcon src={searchIconLink} href=\"Search icon\" />\r\n                <SearchInput \r\n                    placeholder=\"Search or start new chat\"\r\n                    value={value}\r\n                    onChange={handleValue}\r\n                />\r\n            </InputField>\r\n        </SearchWrapper>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","export const contactsInfo = state => state.rootReducer.contacts;\r\n\r\nexport const id = state => state.rootReducer.selectedId;\r\n\r\nexport const dialog = state => state.rootReducer.selectedDialog;\r\nexport const messages = state => state.rootReducer.selectedDialog.map(item => item.messagesList);\r\n// console.log(messages());\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.chucknorris.io/'\r\n  });\r\n  \r\nconst api = {\r\n    getRandomJoke: () => instance.get('jokes/random'),\r\n}\r\n\r\nexport default api;\r\n","import Chats from './chatsController'\r\n\r\nexport default Chats","import React, { useState } from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport moment from 'moment';\r\n\r\nimport { \r\n    ChatsWrapper, \r\n    ChatsHeading,\r\n    ChatContainer,\r\n    TextContainer,\r\n    ContactsName,\r\n    MessageContainer,\r\n    DateContainer,\r\n    TextContainerTop,\r\n    ChatsMain,\r\n    NotFound,\r\n} from './chatsView';\r\nimport Search from '../Search';\r\nimport UsersAvatar from \"../usersAvatar\";\r\nimport { contactsInfo } from \"../../redux/selectors/rootSelectors\";\r\nimport { selectedId } from '../../redux/actions/rootActions';\r\n\r\nconst Chats = () => {\r\n    const contacts = useSelector(contactsInfo);\r\n    const dispatch = useDispatch();\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const handleSearchValue = (e) => {\r\n        setSearchValue(e.target.value);\r\n    }\r\n\r\n    const filterByName = () => {\r\n        const serachedValue = searchValue.toLowerCase();\r\n        return contacts.filter(item => item.name.toLowerCase().includes(serachedValue))\r\n    }\r\n \r\n    const ContactsWrapper = () => (\r\n        <>\r\n            {filterByName().length ? filterByName().map(item => (\r\n                <ChatContainer onClick={() => dispatch(selectedId(item.id))}>\r\n                    <UsersAvatar src={item.avatar} checked={item.checkedProfile} />\r\n                    <TextContainer>\r\n                        <TextContainerTop>\r\n                            <ContactsName>{item.name}</ContactsName>\r\n                            <DateContainer>{moment(item.messagesList[item.messagesList.length - 1].date).format(\"MMM D, YYYY\")}</DateContainer>\r\n                        </TextContainerTop>\r\n                        <MessageContainer>{item.messagesList[item.messagesList.length - 1].message}</MessageContainer>\r\n                    </TextContainer>\r\n                </ChatContainer>   \r\n            )) : \r\n            <NotFound>Not found</NotFound>}\r\n        </>\r\n    )\r\n\r\n    return (\r\n        <ChatsWrapper>\r\n            <Search value={searchValue} handleValue={handleSearchValue}/>\r\n            <ChatsMain>\r\n                <ChatsHeading>Chats</ChatsHeading>\r\n                <ContactsWrapper />\r\n            </ChatsMain>\r\n        </ChatsWrapper>\r\n    );\r\n};\r\n\r\nexport default Chats;\r\n","import api from '../../api/api'\r\n\r\nimport { SEND_MESSAGE, SELECT_ID, GET_JOKE, GET_JOKE_FAIL } from '../constants/types';\r\n\r\nexport const selectedId = id => dispatch => {\r\n      dispatch({\r\n            type: SELECT_ID,\r\n            payload: id,\r\n      })\r\n};\r\n      \r\nexport const sendMessageAction = (text, id) => dispatch => {\r\n      dispatch({\r\n        type: SEND_MESSAGE,\r\n        id,\r\n        payload:                            \r\n            {\r\n                  message: text,\r\n                  date: new Date().toISOString(),\r\n                  sent: true,\r\n            },\r\n      })\r\n};\r\n\r\nexport const getJoke = id => dispatch => {\r\n  api.getRandomJoke()\r\n      .then(res => {\r\n            dispatch({\r\n                  type: GET_JOKE,\r\n                  id,\r\n                  payload:                            \r\n                  {\r\n                        message: res.data.value,\r\n                        date: new Date().toISOString(),\r\n                        sent: false,\r\n                  },\r\n            })\r\n      })\r\n      .catch(err => {\r\n            console.log('Error!');\r\n            dispatch({\r\n                  type: GET_JOKE_FAIL,\r\n                  payload: err,\r\n            });\r\n      });\r\n};\r\n     \r\n\r\n","export const SELECT_ID = 'SELECT_ID';\r\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\r\nexport const GET_JOKE = 'GET_JOKE';\r\nexport const GET_JOKE_FAIL = 'GET_JOKE_FAIL';","import styled  from 'styled-components'\r\n\r\nexport const MessagesWrapper = styled.div`\r\n    max-width: 65vw;\r\n    width: 100%;\r\n    border-left: 1px solid #E5E5E5;\r\n    height: 100vh;\r\n`; \r\nexport const MessagesHeader = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    border-bottom: 2px solid #E5E5E5;\r\n    background-color: #F5F5F5;\r\n    height: 12vh;\r\n`; \r\nexport const ContactsName = styled.div`\r\n    font-size: 20px;\r\n`; \r\nexport const MessagesMain = styled.div`\r\n    position: relative;\r\n    height: 68vh;\r\n    overflow-y : auto;\r\n    &::-webkit-scrollbar {\r\n        width: 10px;\r\n    }\r\n    &::-webkit-scrollbar-track {\r\n        background: #F5F5F5;\r\n    }\r\n    &::-webkit-scrollbar-thumb {\r\n        background:  #5C5C5C;\r\n        border-radius: 10px;\r\n    }\r\n    &::-webkit-scrollbar-thumb:hover {\r\n        background: #3C4154;\r\n    }\r\n`; \r\nexport const Message = styled.div`\r\n    display: flex;\r\n    padding-right: 15px;\r\n    padding-top: 20px;\r\n`; \r\nexport const MessageData = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n`; \r\nexport const TextContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    align-items: ${props => props.send ? `flex-end` : `flex-start`};\r\n`; \r\nexport const TextContainerMessage = styled.div`\r\n    padding-top: 17px;\r\n    padding-left: 14px;\r\n    padding-right: 14px;\r\n    padding-bottom: 17px;\r\n    margin-top: 10px;\r\n    color: ${props => props.send ? `#3C4154` : `#EAEAEA`};\r\n    background-color: ${props => props.send ? `#E5E5E5` : `#3C4154`};\r\n    border-radius: 25px;\r\n    font-size: 18px;\r\n`; \r\nexport const DateContainer = styled.div`\r\n    color: #5C5C5C;\r\n    opacity: 0.8;\r\n    font-size: 14px;\r\n    padding-top: 10px;\r\n    padding-bottom: 10px;\r\n    padding-left: 10px;\r\n`; \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import styled from 'styled-components'\r\n\r\nimport SendIcon from '../../assets/images/sendIcon.svg'\r\n\r\nexport const InputWrapper = styled.div`\r\n    width: 100%;\r\n    background-color: red;\r\n    display: flex;\r\n    border-top: 2px solid #E5E5E5;\r\n    background-color: #F5F5F5;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 20vh;\r\n`; \r\nexport const InputTypeForm = styled.form`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 90%;\r\n    background-color: white;\r\n    border: 1px solid #E5E5E5;\r\n    border-radius: 25px;\r\n    `; \r\nexport const InputType = styled.input`\r\n    border-radius: inherit;\r\n    padding: 20px;\r\n    font-size: 20px;\r\n    width: 90%;\r\n    border: 0;\r\n`; \r\nexport const SendButton = styled.div`\r\n    background-image: url(${SendIcon});\r\n    border: 0;\r\n    width: 10%;\r\n    opacity: 0.8;\r\n    background-repeat: no-repeat;\r\n    background-size: 50%;\r\n    background-position: center;\r\n    cursor: pointer;\r\n    transition: .4s;\r\n    &:hover {\r\n        transform: scale(1.2) \r\n    }\r\n`; \r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { InputWrapper, InputTypeForm, InputType, SendButton } from './messagesFormView';\r\nimport { sendMessageAction, getJoke } from '../../redux/actions/rootActions';\r\nimport { id } from '../../redux/selectors/rootSelectors';\r\n\r\nconst MessagesForm = () => {\r\n    const [typedText, setTypedText] = useState('');\r\n    const handleTypedText = (e) => {\r\n        setTypedText(e.target.value)\r\n    }\r\n    const selectedId = useSelector(id);\r\n    const dispatch = useDispatch();\r\n    const sendMessage = (e) => {\r\n        if (!typedText) return;\r\n        dispatch(sendMessageAction(typedText, selectedId))\r\n        dispatch(getJoke(selectedId))\r\n        setTypedText('')\r\n    }\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter'){\r\n            e.preventDefault()\r\n            sendMessage()\r\n        }\r\n      }\r\n\r\n    return (\r\n        <InputWrapper>\r\n            <InputTypeForm>\r\n                <InputType \r\n                    placeholder='Type your message'\r\n                    value={typedText}\r\n                    onChange={handleTypedText}\r\n                    onKeyPress={handleKeyPress}\r\n                />\r\n                <SendButton \r\n                    onClick={() => sendMessage()}\r\n                    onKeyPress={() => handleKeyPress()}\r\n                />\r\n            </InputTypeForm>\r\n        </InputWrapper>\r\n    );\r\n};\r\n\r\nexport default MessagesForm;","import Messages from './messagesController'\r\n\r\nexport default Messages","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport moment from 'moment'\r\n\r\nimport { \r\n    MessagesWrapper,\r\n    MessagesHeader,\r\n    ContactsName,\r\n    MessagesMain,\r\n    Message,\r\n    MessageData,\r\n    TextContainer,\r\n    TextContainerMessage,\r\n    DateContainer,\r\n} from './messagesView'\r\nimport { contactsInfo, id } from '../../redux/selectors/rootSelectors';\r\nimport MessagesForm from './messagesFormController';\r\nimport UsersAvatar from \"../usersAvatar\";\r\n\r\nconst Messages = (props) => {\r\n    const selectedId = useSelector(id);\r\n    const contacts = useSelector(contactsInfo);\r\n\r\n    const activeDialog = () => {\r\n        const active = contacts.find(user => user.id === selectedId);        \r\n        return (\r\n            active ? \r\n                     <>\r\n                        <MessagesHeader>\r\n                            <UsersAvatar src={active.avatar} checked={active.checkedProfile} />\r\n                            <ContactsName>{active.name}</ContactsName>\r\n                        </MessagesHeader>\r\n                        <MessagesMain>\r\n                                <MessageData>\r\n                                    {active.messagesList.map(item => (\r\n                                        <Message>\r\n                                            <UsersAvatar src={active.avatar} send={item.sent} />\r\n                                            <TextContainer send={item.sent}>\r\n                                                    <TextContainerMessage send={item.sent}>{item.message}</TextContainerMessage>\r\n                                                    <DateContainer>{moment(item.date).format('l, LT')}</DateContainer>\r\n                                            </TextContainer>\r\n                                        </Message>\r\n                                    ))}\r\n                                </MessageData>\r\n                        </MessagesMain>\r\n                        <MessagesForm />\r\n                    </> : ''\r\n        )        \r\n    }\r\n    return (\r\n        <MessagesWrapper>\r\n            {activeDialog()}\r\n        </MessagesWrapper>\r\n    );\r\n};\r\n\r\nexport default Messages;\r\n","import React from 'react';\nimport styled from 'styled-components'\n\nimport Chats from '../Chats'\nimport Messages from '../Messages';\n\nfunction App() {\n  const AppWrapper = styled.div`\n    display: flex;\n    max-width: 1440px;\n    width: 100%;\n    max-height: 100vh;\n    margin: auto;\n    font-family: 'PT Sans', sans-serif;\n  `;\n\n  return (\n    <AppWrapper>\n      <Chats />\n      <Messages />\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","import { SEND_MESSAGE, SELECT_ID, GET_JOKE } from '../constants/types';\r\nimport AliceAvatar from '../../assets/images/webp/alice.webp'\r\nimport JoseffinaAvatar from '../../assets/images/webp/josefiena.webp'\r\nimport VelazzquezAvatar from '../../assets/images/webp/velazzquez.webp'\r\nimport BarrieraAvatar from '../../assets/images/webp/bareira.webp'\r\n\r\nconst initialState = {\r\n    contacts: [\r\n        {\r\n            name: 'Alice Freewoman',   \r\n            avatar: AliceAvatar,   \r\n            messagesList: [\r\n                {\r\n                    message: 'You are the worst!',\r\n                    date: '2019-01-12T09:45:42',\r\n                    sent: false,\r\n                },\r\n                {\r\n                    message: 'Ok',\r\n                    date: '2019-01-12T09:45:42',\r\n                    sent: true,\r\n                },\r\n                {\r\n                    message: `You can type and get a Chuck Norris Joke. Let's try it`,\r\n                    date: '2019-01-12T09:45:42',\r\n                    sent: false,\r\n                },\r\n            ],\r\n            id: 1,\r\n            checkedProfile: true,\r\n        },\r\n        {\r\n            name: 'Josefiena',   \r\n            avatar: JoseffinaAvatar,              \r\n            messagesList: [\r\n                {\r\n                    message: 'Quickly come to the meeting room 18, we have a big server issue',\r\n                    date: \"2019-02-18T10:20:23\",\r\n                    sent: false,\r\n                },\r\n                {\r\n                    message: `I'm having a breakfast right now, can't you wait for 10 minutes?`,\r\n                    date: '2020-02-18T10:21:10',\r\n                    sent: true,\r\n                },\r\n                {\r\n                    message: 'We are loosing money! Quick!',\r\n                    date: '2019-02-18T10:24:40',\r\n                    sent: false,\r\n                },\r\n            ],\r\n            id: 2,\r\n            checkedProfile: true,\r\n        },\r\n        {\r\n            name: 'Velazzquez',   \r\n            avatar: VelazzquezAvatar,   \r\n            messagesList: [\r\n                {\r\n                    message: 'Hi. How are you?',\r\n                    date: \"2019-03-18T12:04:23\",\r\n                    sent: false,\r\n                },\r\n                {\r\n                    message: `Hi, very well. And you?`,\r\n                    date: '2020-03-18T12:34:10',\r\n                    sent: true,\r\n                },\r\n                {\r\n                    message: 'Quickly come to the meeting room 1B, we have a big server issue',\r\n                    date: '2019-03-18T12:59:40',\r\n                    sent: false,\r\n                },\r\n            ],\r\n            id: 3,\r\n            checkedProfile: true,\r\n        },\r\n        {\r\n            name: 'Bareira',   \r\n            avatar: BarrieraAvatar,   \r\n                messagesList: [\r\n                    {\r\n                        message: 'Hi. I have a problem. Can you help me?',\r\n                        date: \"2019-10-10T10:20:23\",\r\n                        sent: false,\r\n                    },\r\n                    {\r\n                        message: `Yes. Of course`,\r\n                        date: '2020-02-10T10:21:10',\r\n                        sent: true,\r\n                    },\r\n                    {\r\n                        message: 'Please, come to me in five minutes',\r\n                        date: '2019-10-10T10:24:40',\r\n                        sent: false,\r\n                    },\r\n                    {\r\n                        message: 'Ok.',\r\n                        date: '2019-10-10T10:24:40',\r\n                        sent: true,\r\n                    },\r\n                    {\r\n                        message: `Thank you`,\r\n                        date: '2019-10-10T10:24:40',\r\n                        sent: false,\r\n                    },\r\n                ],\r\n                id: 4,\r\n                checkedProfile: false,\r\n        },\r\n    ],\r\n    selectedId: null,\r\n  };\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SELECT_ID: {            \r\n            return {\r\n              ...state, \r\n              selectedId: action.payload,\r\n            };\r\n          }\r\n        case SEND_MESSAGE: {\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(dialog => {\r\n                    if(dialog.id === action.id) {\r\n                        return {\r\n                            ...dialog,\r\n                            messagesList: [\r\n                                ...dialog.messagesList,\r\n                                action.payload,\r\n                            ]\r\n                        }}\r\n                        return dialog;\r\n                })\r\n            }\r\n        }\r\n        case GET_JOKE: {\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(dialog => {\r\n                    if(dialog.id === action.id) {\r\n                        return {\r\n                            ...dialog,\r\n                            messagesList: [\r\n                                ...dialog.messagesList,\r\n                                action.payload,\r\n                            ]\r\n                        }}\r\n                        return dialog;\r\n                })\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n        }\r\n};\r\nexport default rootReducer;","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst reducers = combineReducers({\r\n  rootReducer,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/App/App';\nimport store from './redux/store';\nimport './resetStyles.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}